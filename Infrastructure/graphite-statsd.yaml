AWSTemplateFormatVersion: '2010-09-09'
Description: Service Definition
Parameters:
  EnvironmentName:
    Type: String
    Description: A label for the environment that this cloudformation will be part of
    
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: vpc-08a07e173d2095140
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-08d1cc5d1b3b92f3b
    
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-09a1ad1e991f5e62f
    
  Image:
    Type: String
    Default: 831351729356.dkr.ecr.us-east-1.amazonaws.com/graphiteapp:latest
    
  ServiceName:
    Type: String
    Default: graphite-statsd
    
  HostedZoneName:
    Type: String
    Default: kritishpahi.com.np
    
  Subdomain:
    Type: String
    Default: test-app
    
  HealthCheckPath:
    Type: String
    Default: /

  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU

  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container

  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

  # for autoscaling
  MinContainers:
    Type: Number
    Default: 2
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 10
  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 70
    
Resources:
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the graphite-statsd fargate container 
      VpcId: !Ref VPC
      Tags:
        - Key: ResourceType
          Value: securitygroup
          
  SecurityGroupIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from ALB to graphite server
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: 
        Fn::ImportValue:
            !Join [':', [!Ref EnvironmentName, 'LoadBalancer', 'SG' ]]
      FromPort: 80
      ToPort: 80
   
  SecurityGroupIngressFromNodeApp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from node app to statsd server
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: udp
      CidrIp: 172.31.0.0/16
      FromPort: 8125
      ToPort: 8125

  # A log group for storing the container logs for this service
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws', 'ecs', !Ref EnvironmentName, !Ref ServiceName]]
      RetentionInDays: 7

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
            
  # A role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
        
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref Image
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
            - ContainerPort: 8125
              HostPort: 8125
              Protocol: udp
            - ContainerPort: 8126
              HostPort: 8126
              Protocol: tcp
            - ContainerPort: 2003
              HostPort: 2003
              Protocol: tcp
            - ContainerPort: 2004
              HostPort: 2004
              Protocol: tcp
            - ContainerPort: 2023
              HostPort: 2023
              Protocol: tcp
            - ContainerPort: 2024
              HostPort: 2024
              Protocol: tcp
              
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName

  Service:
    Type: AWS::ECS::Service
    Properties:
      PlatformVersion: '1.4.0'
      ServiceName: !Ref ServiceName
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref EnvironmentName, 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref ContainerSecurityGroup]
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref ServiceName, TargetGroup]]
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 
        - Key: stickiness.enabled
          Value: true
      TargetType: ip
      VpcId: !Ref VPC
      Tags:
        - Key: ResourceType
          Value: elasticloadbalancer
      
  HTTPRule:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: 
        Fn::ImportValue:
          !Join [':', [!Ref EnvironmentName, 'LoadBalancerArn']]
      Port: 80
      Protocol: HTTP
      
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ['', [!Ref HostedZoneName, .]]
      Name: !Join ['', [!Ref Subdomain, ., !Ref HostedZoneName, .]]
      Type: A
      AliasTarget:
        DNSName: 
          Fn::ImportValue:
            !Join [':', [!Ref EnvironmentName, 'LoadBalancer', 'Url' ]]
        HostedZoneId: 
          Fn::ImportValue:
            !Join [':', [!Ref EnvironmentName, 'LoadBalancer', 'HostedZoneID' ]]
      
  # User: =kritishpahi@gmail.com is not authorized to perform: application-autoscaling:DescribeScalableTargets with an explicit deny 
  # AWS Account with limited access.
  # AutoScalingTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MinCapacity: !Ref MinContainers
  #     MaxCapacity: !Ref MaxContainers
  #     ResourceId: !Join ['/', [service, !GetAtt Service.Name]]
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs
  #     # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
  #     RoleARN: !GetAtt AutoScalingRole.Arn
  # AutoScalingPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref AutoScalingTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageCPUUtilization
  #       ScaleInCooldown: 10
  #       ScaleOutCooldown: 10
  #       # Keep things at or lower than 50% CPU utilization, for example
  #       TargetValue: !Ref AutoScalingTargetValue
